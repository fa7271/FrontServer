name: Deploy to Vercel

on:
  push:
    branches:
      - main
      - dev # develop 브랜치도 트리거하도록 추가

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      # main 브랜치일 경우 .env.production 생성
      - name: Create .env.production
        if: github.ref_name == 'main'
        run: |
          echo "REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }}" > .env.production
          echo "REACT_APP_EXCEPT_API_URL=${{ secrets.REACT_APP_EXCEPT_API_URL }}" >> .env.production
          echo "REACT_APP_PYTHON_URL=${{ secrets.REACT_APP_PYTHON_URL }}" >> .env.production

      # develop 브랜치일 경우 .env.development 생성 (필요하다면)
      # Preview 환경을 위한 별도의 secret을 만들어 사용하는 것이 좋습니다. (예: secrets.REACT_APP_DEV_API_URL)
      - name: Create .env.development
        if: github.ref_name == 'dev'
        run: |
          echo "REACT_APP_API_URL=${{ secrets.REACT_APP_DEV_API_URL }}" > .env.dev
          echo "REACT_APP_EXCEPT_API_URL=${{ secrets.REACT_APP_DEV_EXCEPT_API_URL }}" >> .env.dev
          echo "REACT_APP_PYTHON_URL=${{ secrets.REACT_APP_DEV_PYTHON_URL }}" >> .env.dev

      - name: Install Vercel CLI
        run: npm install -g vercel

      # main 브랜치일 경우 Production 배포
      - name: Deploy to Vercel Production
        if: github.ref_name == 'main'
        run: vercel --prod --yes --token=${{ secrets.VERCEL_TOKEN }}

      # develop 브랜치일 경우 Preview 배포
      - name: Deploy to Vercel Preview
        if: github.ref_name == 'dev'
        run: vercel --yes --token=${{ secrets.VERCEL_TOKEN }}